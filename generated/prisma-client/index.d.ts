// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  blacklist: (where?: BlacklistWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  right: (where?: RightWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  blacklist: (where: BlacklistWhereUniqueInput) => BlacklistNullablePromise;
  blacklists: (args?: {
    where?: BlacklistWhereInput;
    orderBy?: BlacklistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Blacklist>;
  blacklistsConnection: (args?: {
    where?: BlacklistWhereInput;
    orderBy?: BlacklistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BlacklistConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  right: (where: RightWhereUniqueInput) => RightNullablePromise;
  rights: (args?: {
    where?: RightWhereInput;
    orderBy?: RightOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Right>;
  rightsConnection: (args?: {
    where?: RightWhereInput;
    orderBy?: RightOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RightConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBlacklist: (data: BlacklistCreateInput) => BlacklistPromise;
  updateBlacklist: (args: {
    data: BlacklistUpdateInput;
    where: BlacklistWhereUniqueInput;
  }) => BlacklistPromise;
  updateManyBlacklists: (args: {
    data: BlacklistUpdateManyMutationInput;
    where?: BlacklistWhereInput;
  }) => BatchPayloadPromise;
  upsertBlacklist: (args: {
    where: BlacklistWhereUniqueInput;
    create: BlacklistCreateInput;
    update: BlacklistUpdateInput;
  }) => BlacklistPromise;
  deleteBlacklist: (where: BlacklistWhereUniqueInput) => BlacklistPromise;
  deleteManyBlacklists: (where?: BlacklistWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createRight: (data: RightCreateInput) => RightPromise;
  updateRight: (args: {
    data: RightUpdateInput;
    where: RightWhereUniqueInput;
  }) => RightPromise;
  updateManyRights: (args: {
    data: RightUpdateManyMutationInput;
    where?: RightWhereInput;
  }) => BatchPayloadPromise;
  upsertRight: (args: {
    where: RightWhereUniqueInput;
    create: RightCreateInput;
    update: RightUpdateInput;
  }) => RightPromise;
  deleteRight: (where: RightWhereUniqueInput) => RightPromise;
  deleteManyRights: (where?: RightWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  blacklist: (
    where?: BlacklistSubscriptionWhereInput
  ) => BlacklistSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  right: (
    where?: RightSubscriptionWhereInput
  ) => RightSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GroupOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type BlacklistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "end_time_ASC"
  | "end_time_DESC"
  | "tries_ASC"
  | "tries_DESC";

export type RoleOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type RightOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "create_at_ASC"
  | "create_at_DESC"
  | "updated_at_ASC"
  | "updated_at_DESC"
  | "text_ASC"
  | "text_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "is_verified_ASC"
  | "is_verified_DESC"
  | "is_ban_ASC"
  | "is_ban_DESC"
  | "token_ASC"
  | "token_DESC"
  | "create_at_ASC"
  | "create_at_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GroupUpdateWithoutUsersDataInput {
  owner?: Maybe<UserUpdateOneWithoutGroupsOwnerInput>;
  name?: Maybe<String>;
  messages?: Maybe<MessageUpdateManyWithoutToGroupInput>;
}

export type BlacklistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  name: String;
  users?: Maybe<UserCreateManyWithoutGroupsInput>;
  messages?: Maybe<MessageCreateManyWithoutToGroupInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface UserCreateManyWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput[] | UserCreateWithoutGroupsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateOneWithoutMessagesInput {
  create?: Maybe<UserCreateWithoutMessagesInput>;
  update?: Maybe<UserUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<UserUpsertWithoutMessagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutGroupsInput {
  id?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
  groupsOwner?: Maybe<GroupCreateManyWithoutOwnerInput>;
  roles?: Maybe<RoleCreateManyInput>;
  messages?: Maybe<MessageCreateManyWithoutSentByInput>;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface RoleCreateManyInput {
  create?: Maybe<RoleCreateInput[] | RoleCreateInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RightSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RightWhereInput>;
  AND?: Maybe<RightSubscriptionWhereInput[] | RightSubscriptionWhereInput>;
  OR?: Maybe<RightSubscriptionWhereInput[] | RightSubscriptionWhereInput>;
  NOT?: Maybe<RightSubscriptionWhereInput[] | RightSubscriptionWhereInput>;
}

export interface RoleCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  rights?: Maybe<RightCreateManyInput>;
  group?: Maybe<GroupCreateOneInput>;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface RightCreateManyInput {
  create?: Maybe<RightCreateInput[] | RightCreateInput>;
  connect?: Maybe<RightWhereUniqueInput[] | RightWhereUniqueInput>;
}

export interface RoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  rights_every?: Maybe<RightWhereInput>;
  rights_some?: Maybe<RightWhereInput>;
  rights_none?: Maybe<RightWhereInput>;
  group?: Maybe<GroupWhereInput>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export interface RightCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  create_at?: Maybe<DateTimeInput>;
  create_at_not?: Maybe<DateTimeInput>;
  create_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_at_lt?: Maybe<DateTimeInput>;
  create_at_lte?: Maybe<DateTimeInput>;
  create_at_gt?: Maybe<DateTimeInput>;
  create_at_gte?: Maybe<DateTimeInput>;
  updated_at?: Maybe<DateTimeInput>;
  updated_at_not?: Maybe<DateTimeInput>;
  updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_at_lt?: Maybe<DateTimeInput>;
  updated_at_lte?: Maybe<DateTimeInput>;
  updated_at_gt?: Maybe<DateTimeInput>;
  updated_at_gte?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  sentBy?: Maybe<UserWhereInput>;
  toGroup?: Maybe<GroupWhereInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface GroupCreateOneInput {
  create?: Maybe<GroupCreateInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface BlacklistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  end_time?: Maybe<DateTimeInput>;
  end_time_not?: Maybe<DateTimeInput>;
  end_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_lt?: Maybe<DateTimeInput>;
  end_time_lte?: Maybe<DateTimeInput>;
  end_time_gt?: Maybe<DateTimeInput>;
  end_time_gte?: Maybe<DateTimeInput>;
  tries?: Maybe<Int>;
  tries_not?: Maybe<Int>;
  tries_in?: Maybe<Int[] | Int>;
  tries_not_in?: Maybe<Int[] | Int>;
  tries_lt?: Maybe<Int>;
  tries_lte?: Maybe<Int>;
  tries_gt?: Maybe<Int>;
  tries_gte?: Maybe<Int>;
  AND?: Maybe<BlacklistWhereInput[] | BlacklistWhereInput>;
  OR?: Maybe<BlacklistWhereInput[] | BlacklistWhereInput>;
  NOT?: Maybe<BlacklistWhereInput[] | BlacklistWhereInput>;
}

export interface MessageCreateManyWithoutSentByInput {
  create?: Maybe<
    MessageCreateWithoutSentByInput[] | MessageCreateWithoutSentByInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
}

export interface MessageCreateWithoutSentByInput {
  id?: Maybe<ID_Input>;
  text: String;
  toGroup: GroupCreateOneWithoutMessagesInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  groupsOwner?: Maybe<GroupCreateManyWithoutOwnerInput>;
  roles?: Maybe<RoleCreateManyInput>;
  messages?: Maybe<MessageCreateManyWithoutSentByInput>;
}

export interface GroupCreateOneWithoutMessagesInput {
  create?: Maybe<GroupCreateWithoutMessagesInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface RoleUpdateInput {
  name?: Maybe<String>;
  rights?: Maybe<RightUpdateManyInput>;
  group?: Maybe<GroupUpdateOneInput>;
}

export interface GroupCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutGroupsOwnerInput>;
  name: String;
  users?: Maybe<UserCreateManyWithoutGroupsInput>;
}

export interface RightUpdateInput {
  name?: Maybe<String>;
}

export interface GroupUpdateInput {
  owner?: Maybe<UserUpdateOneWithoutGroupsOwnerInput>;
  name?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutGroupsInput>;
  messages?: Maybe<MessageUpdateManyWithoutToGroupInput>;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneWithoutGroupsOwnerInput {
  create?: Maybe<UserCreateWithoutGroupsOwnerInput>;
  update?: Maybe<UserUpdateWithoutGroupsOwnerDataInput>;
  upsert?: Maybe<UserUpsertWithoutGroupsOwnerInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  sentBy?: Maybe<UserCreateOneWithoutMessagesInput>;
  toGroup: GroupCreateOneWithoutMessagesInput;
}

export interface UserUpdateWithoutGroupsOwnerDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  roles?: Maybe<RoleUpdateManyInput>;
  messages?: Maybe<MessageUpdateManyWithoutSentByInput>;
}

export type RightWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupUpdateManyWithoutUsersInput {
  create?: Maybe<GroupCreateWithoutUsersInput[] | GroupCreateWithoutUsersInput>;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutUsersInput[]
    | GroupUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutUsersInput[]
    | GroupUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpsertWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutUsersDataInput;
  create: GroupCreateWithoutUsersInput;
}

export interface GroupUpdateWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutUsersDataInput;
}

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutGroupsDataInput;
  create: UserCreateWithoutGroupsInput;
}

export interface GroupUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface MessageUpdateManyWithoutToGroupInput {
  create?: Maybe<
    MessageCreateWithoutToGroupInput[] | MessageCreateWithoutToGroupInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutToGroupInput[]
    | MessageUpdateWithWhereUniqueWithoutToGroupInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutToGroupInput[]
    | MessageUpsertWithWhereUniqueWithoutToGroupInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface MessageUpdateWithWhereUniqueWithoutToGroupInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutToGroupDataInput;
}

export interface GroupUpsertWithWhereUniqueWithoutOwnerInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutOwnerDataInput;
  create: GroupCreateWithoutOwnerInput;
}

export interface MessageUpdateWithoutToGroupDataInput {
  text?: Maybe<String>;
  sentBy?: Maybe<UserUpdateOneWithoutMessagesInput>;
}

export interface BlacklistUpdateInput {
  ip?: Maybe<String>;
  end_time?: Maybe<DateTimeInput>;
  tries?: Maybe<Int>;
}

export interface MessageUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateWithoutMessagesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  groupsOwner?: Maybe<GroupUpdateManyWithoutOwnerInput>;
  roles?: Maybe<RoleUpdateManyInput>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutGroupsOwnerInput>;
  name: String;
  users?: Maybe<UserCreateManyWithoutGroupsInput>;
  messages?: Maybe<MessageCreateManyWithoutToGroupInput>;
}

export interface GroupUpdateManyWithoutOwnerInput {
  create?: Maybe<GroupCreateWithoutOwnerInput[] | GroupCreateWithoutOwnerInput>;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutOwnerInput[]
    | GroupUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutOwnerInput[]
    | GroupUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutGroupsOwnerInput {
  id?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  roles?: Maybe<RoleCreateManyInput>;
  messages?: Maybe<MessageCreateManyWithoutSentByInput>;
}

export interface GroupUpdateWithWhereUniqueWithoutOwnerInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutOwnerDataInput;
}

export interface GroupCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutGroupsOwnerInput>;
  name: String;
  messages?: Maybe<MessageCreateManyWithoutToGroupInput>;
}

export interface GroupUpdateWithoutOwnerDataInput {
  name?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutGroupsInput>;
  messages?: Maybe<MessageUpdateManyWithoutToGroupInput>;
}

export interface MessageCreateWithoutToGroupInput {
  id?: Maybe<ID_Input>;
  text: String;
  sentBy?: Maybe<UserCreateOneWithoutMessagesInput>;
}

export interface UserUpdateManyWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput[] | UserCreateWithoutGroupsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutGroupsInput[]
    | UserUpdateWithWhereUniqueWithoutGroupsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutGroupsInput[]
    | UserUpsertWithWhereUniqueWithoutGroupsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  groupsOwner?: Maybe<GroupCreateManyWithoutOwnerInput>;
  roles?: Maybe<RoleCreateManyInput>;
}

export interface UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutGroupsDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateWithoutGroupsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
  groupsOwner?: Maybe<GroupUpdateManyWithoutOwnerInput>;
  roles?: Maybe<RoleUpdateManyInput>;
  messages?: Maybe<MessageUpdateManyWithoutSentByInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface RoleUpdateManyInput {
  create?: Maybe<RoleCreateInput[] | RoleCreateInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueNestedInput[]
    | RoleUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueNestedInput[]
    | RoleUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RightWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<RightWhereInput[] | RightWhereInput>;
  OR?: Maybe<RightWhereInput[] | RightWhereInput>;
  NOT?: Maybe<RightWhereInput[] | RightWhereInput>;
}

export interface RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateDataInput;
}

export interface BlacklistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BlacklistWhereInput>;
  AND?: Maybe<
    BlacklistSubscriptionWhereInput[] | BlacklistSubscriptionWhereInput
  >;
  OR?: Maybe<
    BlacklistSubscriptionWhereInput[] | BlacklistSubscriptionWhereInput
  >;
  NOT?: Maybe<
    BlacklistSubscriptionWhereInput[] | BlacklistSubscriptionWhereInput
  >;
}

export interface RoleUpdateDataInput {
  name?: Maybe<String>;
  rights?: Maybe<RightUpdateManyInput>;
  group?: Maybe<GroupUpdateOneInput>;
}

export interface RoleUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface RightUpdateManyInput {
  create?: Maybe<RightCreateInput[] | RightCreateInput>;
  update?: Maybe<
    | RightUpdateWithWhereUniqueNestedInput[]
    | RightUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RightUpsertWithWhereUniqueNestedInput[]
    | RightUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RightWhereUniqueInput[] | RightWhereUniqueInput>;
  connect?: Maybe<RightWhereUniqueInput[] | RightWhereUniqueInput>;
  set?: Maybe<RightWhereUniqueInput[] | RightWhereUniqueInput>;
  disconnect?: Maybe<RightWhereUniqueInput[] | RightWhereUniqueInput>;
  deleteMany?: Maybe<RightScalarWhereInput[] | RightScalarWhereInput>;
  updateMany?: Maybe<
    RightUpdateManyWithWhereNestedInput[] | RightUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface RightUpdateWithWhereUniqueNestedInput {
  where: RightWhereUniqueInput;
  data: RightUpdateDataInput;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface RightUpdateDataInput {
  name?: Maybe<String>;
}

export interface MessageUpsertWithWhereUniqueWithoutToGroupInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutToGroupDataInput;
  create: MessageCreateWithoutToGroupInput;
}

export interface RightUpsertWithWhereUniqueNestedInput {
  where: RightWhereUniqueInput;
  update: RightUpdateDataInput;
  create: RightCreateInput;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface RightScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<RightScalarWhereInput[] | RightScalarWhereInput>;
  OR?: Maybe<RightScalarWhereInput[] | RightScalarWhereInput>;
  NOT?: Maybe<RightScalarWhereInput[] | RightScalarWhereInput>;
}

export interface UserUpdateManyDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
}

export interface RightUpdateManyWithWhereNestedInput {
  where: RightScalarWhereInput;
  data: RightUpdateManyDataInput;
}

export interface BlacklistUpdateManyMutationInput {
  ip?: Maybe<String>;
  end_time?: Maybe<DateTimeInput>;
  tries?: Maybe<Int>;
}

export interface RightUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserCreateOneWithoutGroupsOwnerInput {
  create?: Maybe<UserCreateWithoutGroupsOwnerInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GroupUpdateOneInput {
  create?: Maybe<GroupCreateInput>;
  update?: Maybe<GroupUpdateDataInput>;
  upsert?: Maybe<GroupUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface MessageCreateManyWithoutToGroupInput {
  create?: Maybe<
    MessageCreateWithoutToGroupInput[] | MessageCreateWithoutToGroupInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface GroupUpdateDataInput {
  owner?: Maybe<UserUpdateOneWithoutGroupsOwnerInput>;
  name?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutGroupsInput>;
  messages?: Maybe<MessageUpdateManyWithoutToGroupInput>;
}

export interface GroupCreateManyWithoutOwnerInput {
  create?: Maybe<GroupCreateWithoutOwnerInput[] | GroupCreateWithoutOwnerInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface GroupUpsertNestedInput {
  update: GroupUpdateDataInput;
  create: GroupCreateInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_verified_not?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  is_ban_not?: Maybe<Boolean>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  create_at?: Maybe<DateTimeInput>;
  create_at_not?: Maybe<DateTimeInput>;
  create_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_at_lt?: Maybe<DateTimeInput>;
  create_at_lte?: Maybe<DateTimeInput>;
  create_at_gt?: Maybe<DateTimeInput>;
  create_at_gte?: Maybe<DateTimeInput>;
  groups_every?: Maybe<GroupWhereInput>;
  groups_some?: Maybe<GroupWhereInput>;
  groups_none?: Maybe<GroupWhereInput>;
  groupsOwner_every?: Maybe<GroupWhereInput>;
  groupsOwner_some?: Maybe<GroupWhereInput>;
  groupsOwner_none?: Maybe<GroupWhereInput>;
  roles_every?: Maybe<RoleWhereInput>;
  roles_some?: Maybe<RoleWhereInput>;
  roles_none?: Maybe<RoleWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface UserUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  token?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  groupsOwner?: Maybe<GroupUpdateManyWithoutOwnerInput>;
  roles?: Maybe<RoleUpdateManyInput>;
  messages?: Maybe<MessageUpdateManyWithoutSentByInput>;
}

export interface RoleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  OR?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  NOT?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
}

export interface MessageUpdateInput {
  text?: Maybe<String>;
  sentBy?: Maybe<UserUpdateOneWithoutMessagesInput>;
  toGroup?: Maybe<GroupUpdateOneRequiredWithoutMessagesInput>;
}

export interface RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput;
  data: RoleUpdateManyDataInput;
}

export interface UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput;
  create: UserCreateWithoutMessagesInput;
}

export interface RoleUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface BlacklistCreateInput {
  id?: Maybe<ID_Input>;
  ip?: Maybe<String>;
  end_time?: Maybe<DateTimeInput>;
  tries?: Maybe<Int>;
}

export interface MessageUpdateManyWithoutSentByInput {
  create?: Maybe<
    MessageCreateWithoutSentByInput[] | MessageCreateWithoutSentByInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutSentByInput[]
    | MessageUpdateWithWhereUniqueWithoutSentByInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutSentByInput[]
    | MessageUpsertWithWhereUniqueWithoutSentByInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface GroupCreateManyWithoutUsersInput {
  create?: Maybe<GroupCreateWithoutUsersInput[] | GroupCreateWithoutUsersInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface MessageUpdateWithWhereUniqueWithoutSentByInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutSentByDataInput;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageUpdateWithoutSentByDataInput {
  text?: Maybe<String>;
  toGroup?: Maybe<GroupUpdateOneRequiredWithoutMessagesInput>;
}

export interface RightUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface GroupUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<GroupCreateWithoutMessagesInput>;
  update?: Maybe<GroupUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<GroupUpsertWithoutMessagesInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  OR?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  NOT?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  create_at?: Maybe<DateTimeInput>;
  create_at_not?: Maybe<DateTimeInput>;
  create_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_at_lt?: Maybe<DateTimeInput>;
  create_at_lte?: Maybe<DateTimeInput>;
  create_at_gt?: Maybe<DateTimeInput>;
  create_at_gte?: Maybe<DateTimeInput>;
  updated_at?: Maybe<DateTimeInput>;
  updated_at_not?: Maybe<DateTimeInput>;
  updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_at_lt?: Maybe<DateTimeInput>;
  updated_at_lte?: Maybe<DateTimeInput>;
  updated_at_gt?: Maybe<DateTimeInput>;
  updated_at_gte?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpsertWithWhereUniqueWithoutSentByInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutSentByDataInput;
  create: MessageCreateWithoutSentByInput;
}

export interface GroupUpsertWithoutMessagesInput {
  update: GroupUpdateWithoutMessagesDataInput;
  create: GroupCreateWithoutMessagesInput;
}

export interface GroupUpdateWithoutMessagesDataInput {
  owner?: Maybe<UserUpdateOneWithoutGroupsOwnerInput>;
  name?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutGroupsInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_verified_not?: Maybe<Boolean>;
  is_ban?: Maybe<Boolean>;
  is_ban_not?: Maybe<Boolean>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  create_at?: Maybe<DateTimeInput>;
  create_at_not?: Maybe<DateTimeInput>;
  create_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_at_lt?: Maybe<DateTimeInput>;
  create_at_lte?: Maybe<DateTimeInput>;
  create_at_gt?: Maybe<DateTimeInput>;
  create_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpsertWithoutGroupsOwnerInput {
  update: UserUpdateWithoutGroupsOwnerDataInput;
  create: UserCreateWithoutGroupsOwnerInput;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface UserCreateOneWithoutMessagesInput {
  create?: Maybe<UserCreateWithoutMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstname?: String;
  lastname?: String;
  email?: String;
  password?: String;
  phone?: String;
  is_verified?: Boolean;
  is_ban?: Boolean;
  token?: String;
  create_at?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  is_ban: () => Promise<Boolean>;
  token: () => Promise<String>;
  create_at: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  is_ban: () => Promise<AsyncIterator<Boolean>>;
  token: () => Promise<AsyncIterator<String>>;
  create_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BlacklistEdge {
  node: Blacklist;
  cursor: String;
}

export interface BlacklistEdgePromise
  extends Promise<BlacklistEdge>,
    Fragmentable {
  node: <T = BlacklistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BlacklistEdgeSubscription
  extends Promise<AsyncIterator<BlacklistEdge>>,
    Fragmentable {
  node: <T = BlacklistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBlacklist {
  count: Int;
}

export interface AggregateBlacklistPromise
  extends Promise<AggregateBlacklist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBlacklistSubscription
  extends Promise<AsyncIterator<AggregateBlacklist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Message {
  id: ID_Output;
  create_at: DateTimeOutput;
  updated_at: DateTimeOutput;
  text: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  create_at: () => Promise<DateTimeOutput>;
  updated_at: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  sentBy: <T = UserPromise>() => T;
  toGroup: <T = GroupPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  create_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  sentBy: <T = UserSubscription>() => T;
  toGroup: <T = GroupSubscription>() => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  create_at: () => Promise<DateTimeOutput>;
  updated_at: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  sentBy: <T = UserPromise>() => T;
  toGroup: <T = GroupPromise>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RolePreviousValues {
  id: ID_Output;
  name: String;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Right {
  id: ID_Output;
  name: String;
}

export interface RightPromise extends Promise<Right>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RightSubscription
  extends Promise<AsyncIterator<Right>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RightNullablePromise
  extends Promise<Right | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Role {
  id: ID_Output;
  name: String;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  rights: <T = FragmentableArray<Right>>(args?: {
    where?: RightWhereInput;
    orderBy?: RightOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupPromise>() => T;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  rights: <T = Promise<AsyncIterator<RightSubscription>>>(args?: {
    where?: RightWhereInput;
    orderBy?: RightOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupSubscription>() => T;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  rights: <T = FragmentableArray<Right>>(args?: {
    where?: RightWhereInput;
    orderBy?: RightOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupPromise>() => T;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface Blacklist {
  id: ID_Output;
  ip?: String;
  end_time?: DateTimeOutput;
  tries?: Int;
}

export interface BlacklistPromise extends Promise<Blacklist>, Fragmentable {
  id: () => Promise<ID_Output>;
  ip: () => Promise<String>;
  end_time: () => Promise<DateTimeOutput>;
  tries: () => Promise<Int>;
}

export interface BlacklistSubscription
  extends Promise<AsyncIterator<Blacklist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ip: () => Promise<AsyncIterator<String>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  tries: () => Promise<AsyncIterator<Int>>;
}

export interface BlacklistNullablePromise
  extends Promise<Blacklist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ip: () => Promise<String>;
  end_time: () => Promise<DateTimeOutput>;
  tries: () => Promise<Int>;
}

export interface RightEdge {
  node: Right;
  cursor: String;
}

export interface RightEdgePromise extends Promise<RightEdge>, Fragmentable {
  node: <T = RightPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RightEdgeSubscription
  extends Promise<AsyncIterator<RightEdge>>,
    Fragmentable {
  node: <T = RightSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BlacklistSubscriptionPayload {
  mutation: MutationType;
  node: Blacklist;
  updatedFields: String[];
  previousValues: BlacklistPreviousValues;
}

export interface BlacklistSubscriptionPayloadPromise
  extends Promise<BlacklistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BlacklistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BlacklistPreviousValuesPromise>() => T;
}

export interface BlacklistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BlacklistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BlacklistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BlacklistPreviousValuesSubscription>() => T;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BlacklistPreviousValues {
  id: ID_Output;
  ip?: String;
  end_time?: DateTimeOutput;
  tries?: Int;
}

export interface BlacklistPreviousValuesPromise
  extends Promise<BlacklistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ip: () => Promise<String>;
  end_time: () => Promise<DateTimeOutput>;
  tries: () => Promise<Int>;
}

export interface BlacklistPreviousValuesSubscription
  extends Promise<AsyncIterator<BlacklistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ip: () => Promise<AsyncIterator<String>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  tries: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface BlacklistConnection {
  pageInfo: PageInfo;
  edges: BlacklistEdge[];
}

export interface BlacklistConnectionPromise
  extends Promise<BlacklistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BlacklistEdge>>() => T;
  aggregate: <T = AggregateBlacklistPromise>() => T;
}

export interface BlacklistConnectionSubscription
  extends Promise<AsyncIterator<BlacklistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BlacklistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBlacklistSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  firstname?: String;
  lastname?: String;
  email?: String;
  password?: String;
  phone?: String;
  is_verified?: Boolean;
  is_ban?: Boolean;
  token?: String;
  create_at?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  is_ban: () => Promise<Boolean>;
  token: () => Promise<String>;
  create_at: () => Promise<DateTimeOutput>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupsOwner: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  is_ban: () => Promise<AsyncIterator<Boolean>>;
  token: () => Promise<AsyncIterator<String>>;
  create_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupsOwner: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  is_ban: () => Promise<Boolean>;
  token: () => Promise<String>;
  create_at: () => Promise<DateTimeOutput>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupsOwner: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateRight {
  count: Int;
}

export interface AggregateRightPromise
  extends Promise<AggregateRight>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRightSubscription
  extends Promise<AsyncIterator<AggregateRight>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface RightPreviousValues {
  id: ID_Output;
  name: String;
}

export interface RightPreviousValuesPromise
  extends Promise<RightPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RightPreviousValuesSubscription
  extends Promise<AsyncIterator<RightPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RightSubscriptionPayload {
  mutation: MutationType;
  node: Right;
  updatedFields: String[];
  previousValues: RightPreviousValues;
}

export interface RightSubscriptionPayloadPromise
  extends Promise<RightSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RightPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RightPreviousValuesPromise>() => T;
}

export interface RightSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RightSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RightSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RightPreviousValuesSubscription>() => T;
}

export interface Group {
  id: ID_Output;
  name: String;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  create_at: DateTimeOutput;
  updated_at: DateTimeOutput;
  text: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  create_at: () => Promise<DateTimeOutput>;
  updated_at: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  create_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RightConnection {
  pageInfo: PageInfo;
  edges: RightEdge[];
}

export interface RightConnectionPromise
  extends Promise<RightConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RightEdge>>() => T;
  aggregate: <T = AggregateRightPromise>() => T;
}

export interface RightConnectionSubscription
  extends Promise<AsyncIterator<RightConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RightEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRightSubscription>() => T;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Right",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Blacklist",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
